//let currentConversationId = null; // –≥–ª–æ–±–∞–ª—å–Ω–æ
let currentSubscription = null;

// –ü—É—Ç—å –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
const socket = new SockJS('/ws'); // –ü—É—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è WebSocket –≤ Spring

// –°–æ–∑–¥–∞–µ–º STOMP –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤–µ—Ä—Ö SockJS
const stompClient = Stomp.over(socket);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function connect() {
    stompClient.connect({}, function (frame) {
        console.log('Connected: ' + frame);

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        stompClient.subscribe("/user/queue/conversations", function(message) {
            const conversations = JSON.parse(message.body);
            renderConversations(conversations); // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
        });

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
        stompClient.subscribe('/user/queue/interlocutorInfo', function (message) {
            const interlocutorInfo = JSON.parse(message.body);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
            if (interlocutorInfo && interlocutorInfo.interlocutorName && interlocutorInfo.interlocutorAvatar) {
                document.getElementById('interlocutorName').innerText = interlocutorInfo.interlocutorName;
                document.getElementById('interlocutorAvatar').src = interlocutorInfo.interlocutorAvatar;
            } else {
                console.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞:", interlocutorInfo);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–ª–∏–∫–æ–≤ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º
        initializeDialogClickListeners();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        loadConversations();
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
function getInterlocutorInfo(conversationId) {
    stompClient.send("/app/chat.getInterlocutorInfo", {}, JSON.stringify({ conversationId: conversationId }));
}

/*function loadConversations() {
    stompClient.send("/app/conversations", {}, {});
}*/

function loadMessagesForConversation(conversationId) {
    const requestedConversationId = conversationId;

    fetch('/secure/messenger/' + requestedConversationId)
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + response.statusText);
            }
            return response.json();
        })
        .then(messages => {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç ‚Äî –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            if (requestedConversationId !== currentConversationId) {
                console.log('–ü—Ä–æ–ø—É—â–µ–Ω –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç');
                return;
            }

            const messageContainer = document.getElementById("messages-container");
            messageContainer.innerHTML = ''; // –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –Ω–æ–≤—ã—Ö

            if (Array.isArray(messages)) {
                if (messages.length === 0) {
                    console.log('–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –Ω–µ—Ç');
                }
                messages.forEach(message => {
                    showMessage(message);
                });
            } else {
                console.error('–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', messages);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        });
}

function renderConversations(conversations) {
    const container = document.querySelector(".dialogs-list");

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    container.innerHTML = "";

    if (conversations.length === 0) {
        container.innerHTML = `
            <div class="no-dialogs">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.</p>
                <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</p>
            </div>
        `;
        return;
    }

    conversations.forEach(conversation => {
        const dialogItem = document.createElement("div");
        dialogItem.classList.add("dialog-item");
        dialogItem.setAttribute("data-conversation-id", conversation.id);

        dialogItem.innerHTML = `
            <div class="dialog-avatar">
                <img src="${conversation.interlocutorAvatar}" 
                     onerror="this.src='/images/avatar-placeholder.png'" 
                     alt="–ê–≤–∞—Ç–∞—Ä">
            </div>

            <div class="dialog-content">
                <div class="dialog-header">
                    <h4>${conversation.interlocutorName}</h4>
                    <span class="dialog-time">${conversation.lastMessageTime || ""}</span>
                </div>

                <p class="dialog-preview">${conversation.lastMessagePreview || ""}</p>

                <div class="dialog-meta">
                    ${conversation.unreadCount > 0
            ? `<span class="unread-count">${conversation.unreadCount}</span>`
            : ""}
                    ${conversation.listing
            ? `<span class="dialog-listing">–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${conversation.listing.title}</span>`
            : ""}
                </div>
            </div>
        `;

        container.appendChild(dialogItem);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const messageText = document.getElementById('message-input').value;
    if (!messageText.trim()) {
        console.error("Message text cannot be empty.");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —á–∞—Ç–∞
    if (!currentUserId || !currentConversationId) {
        console.error("User or conversation ID is missing.");
        return;
    }

    const message = {
        text: messageText,
        senderId: currentUserId,
        conversationId: currentConversationId
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ STOMP
    stompClient.send("/app/chat.send", {}, JSON.stringify(message));

    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('message-input').value = '';
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function showMessage(message) {
    console.log('Received message: ', message);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageContainer = document.getElementById("messages-container");
    const messageElement = document.createElement("div");
    messageElement.className = message.senderId === currentUserId ? 'message-out' : 'message-in'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messageElement.innerHTML = `
        <div class="message-content">
            <p>${message.text}</p>
            <span class="message-time">${new Date(message.sentAt).toLocaleTimeString()}</span>
        </div>
    `;
    messageContainer.appendChild(messageElement);

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∏–∑
    messageContainer.scrollTop = messageContainer.scrollHeight;
}

// –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ STOMP (–ø–æ—Å–ª–µ stompClient.connect)
function initializeDialogClickListeners() {
    const dialogItems = document.querySelectorAll('.dialog-item');

    dialogItems.forEach(item => {
        item.addEventListener('click', function () {
            const selectedId = this.getAttribute('data-conversation-id');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
            if (currentConversationId !== selectedId) {
                currentConversationId = selectedId;

                // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                dialogItems.forEach(d => d.classList.remove('active'));
                this.classList.add('active');

                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                document.getElementById('messages-container').innerHTML = '';

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ STOMP
                if (stompClient.connected) {
                    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if (currentSubscription) {
                        currentSubscription.unsubscribe();
                    }

                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                    currentSubscription = stompClient.subscribe('/topic/messages.' + currentConversationId, function (messageOutput) {
                        showMessage(JSON.parse(messageOutput.body)); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    });
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                loadMessagesForConversation(currentConversationId);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ –º—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                stompClient.send("/app/chat.markAsRead", {}, JSON.stringify({
                    conversationId: currentConversationId
                }));

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
                getInterlocutorInfo(currentConversationId);
            }
        });
    });

    // üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (dialogItems.length > 0) {
        dialogItems[0].click();
    }
}


// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connect();

// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
document.getElementById('send-btn').addEventListener('click', sendMessage);
